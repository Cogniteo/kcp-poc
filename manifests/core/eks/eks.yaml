---
AWSTemplateFormatVersion: "2010-09-09"
Description:
  "EKS cluster (dedicated VPC: true, dedicated IAM: true) [created and
  managed by eksctl]"
Parameters:
  ClusterName:
    Type: String
    Description: EKS cluster name to create
  CreateSpotRole:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
Conditions:
  NeedSpotRole:
    Fn::Equals:
      - !Ref CreateSpotRole
      - "true"
Resources:
  SpotServiceLinkedRole:
    Condition: NeedSpotRole
    Type: AWS::IAM::ServiceLinkedRole
    Properties:
      AWSServiceName: spot.amazonaws.com
      Description: "Service-linked role for EC2 Spot Instances"
  AutoModeNodeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: "${AWS::StackName}-auto-mode-node-role"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
  EKSAutoNodeRoleAccessEntry:
    Type: AWS::EKS::AccessEntry
    Properties:
      ClusterName: !Ref ClusterName
      PrincipalArn: !GetAtt AutoModeNodeRole.Arn
      Type: "EC2"
      AccessPolicies:
        - AccessScope:
            Type: cluster
          PolicyArn: arn:aws:eks::aws:cluster-access-policy/AmazonEKSAutoNodePolicy
    DependsOn:
      - ControlPlane
  ClusterSharedNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Communication between all nodes in the cluster
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}/ClusterSharedNodeSecurityGroup"
      VpcId:
        Fn::ImportValue: !Sub "${ClusterName}-VpcId"
  ControlPlane:
    Type: AWS::EKS::Cluster
    Properties:
      AccessConfig:
        AuthenticationMode: API_AND_CONFIG_MAP
        BootstrapClusterCreatorAdminPermissions: true
      BootstrapSelfManagedAddons: false
      ComputeConfig:
        Enabled: true
      KubernetesNetworkConfig:
        ElasticLoadBalancing:
          Enabled: true
      Name: !Ref ClusterName
      ResourcesVpcConfig:
        EndpointPrivateAccess: false
        EndpointPublicAccess: true
        SecurityGroupIds:
          - Ref: ControlPlaneSecurityGroup
        SubnetIds:
          Fn::Split:
            - ","
            - Fn::Join:
                - ","
                - - Fn::ImportValue: !Sub "${ClusterName}-PublicSubnetIds"
                  - Fn::ImportValue: !Sub "${ClusterName}-PrivateSubnetIds"
      RoleArn:
        Fn::GetAtt:
          - ServiceRole
          - Arn
      StorageConfig:
        BlockStorage:
          Enabled: true
      Tags:
        - Key: karpenter.sh/discovery
          Value: cluster-with-karpenter
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}/ControlPlane"
      Version: "1.32"
    DependsOn:
      - AutoModeNodeRole
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Communication between the control plane and worker nodegroups
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}/ControlPlaneSecurityGroup"
      VpcId:
        Fn::ImportValue: !Sub "${ClusterName}-VpcId"
  IngressDefaultClusterToNodeSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description:
        Allow managed and unmanaged nodes to communicate with each other
        (all ports)
      GroupId:
        Ref: ClusterSharedNodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Fn::GetAtt:
          - ControlPlane
          - ClusterSecurityGroupId
  IngressInterNodeGroupSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow nodes to communicate with each other (all ports)
      GroupId:
        Ref: ClusterSharedNodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: ClusterSharedNodeSecurityGroup
  IngressNodeToDefaultClusterSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow unmanaged nodes to communicate with control plane (all ports)
      GroupId:
        Fn::GetAtt:
          - ControlPlane
          - ClusterSecurityGroupId
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: ClusterSharedNodeSecurityGroup
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
              - sts:TagSession
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSVPCResourceController
        - arn:aws:iam::aws:policy/AmazonEKSComputePolicy
        - arn:aws:iam::aws:policy/AmazonEKSBlockStoragePolicy
        - arn:aws:iam::aws:policy/AmazonEKSLoadBalancingPolicy
        - arn:aws:iam::aws:policy/AmazonEKSNetworkingPolicy
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}/ServiceRole"

  # IAM IRSA for ExternalDNS
  ExternalDnsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ClusterName}-external-dns-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
              - pods.eks.amazonaws.com
          Action:
            - sts:AssumeRole
            - sts:TagSession
      Policies:
        - PolicyName: external-dns-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                  - route53:ListHostedZones
                  - route53:ListHostedZonesByName
                  - route53:ListResourceRecordSets
                Resource: "*"

  ExternalDnsPodIdentityAssociation:
    Type: AWS::EKS::PodIdentityAssociation
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: external-dns
      ServiceAccount: external-dns
      RoleArn: !GetAtt ExternalDnsRole.Arn
    DependsOn:
      - ControlPlane

  # IAM IRSA for Cert-Manager (ACME DNS solver)
  CertManagerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ClusterName}-cert-manager-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - pods.eks.amazonaws.com
            Action:
              - sts:AssumeRole
              - sts:TagSession
      Policies:
        - PolicyName: cert-manager-route53-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                  - route53:GetChange
                  - route53:ListHostedZones
                  - route53:ListHostedZonesByName
                  - route53:ListResourceRecordSets
                  - acm:ImportCertificate
                Resource: "*"

  CertManagerPodIdentityAssociation:
    Type: AWS::EKS::PodIdentityAssociation
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: cert-manager
      ServiceAccount: cert-manager
      RoleArn: !GetAtt CertManagerRole.Arn
    DependsOn:
      - ControlPlane

  # IAM IRSA role and association for AWS Controllers for Kubernetes (ACK operator)
  AckControllerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ClusterName}-ack-controller-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - pods.eks.amazonaws.com
            Action:
              - sts:AssumeRole
              - sts:TagSession
      Policies:
        - PolicyName: ack-acm-controller-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - acm:RequestCertificate
                  - acm:DeleteCertificate
                  - acm:DescribeCertificate
                  - acm:ListCertificates
                  - acm:AddTagsToCertificate
                  - acm:ListTagsForCertificate
                Resource: "*"
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                  - route53:ListHostedZones
                  - route53:ListHostedZonesByName
                  - route53:ListResourceRecordSets
                  - route53:GetChange
                Resource: "*"

  AckControllerPodIdentityAssociation:
    Type: AWS::EKS::PodIdentityAssociation
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: ack-system
      ServiceAccount: ack-acm-controller
      RoleArn: !GetAtt AckControllerRole.Arn
    DependsOn:
      - ControlPlane
  AckCognitoControllerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ClusterName}-ack-cognito-controller-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - pods.eks.amazonaws.com
            Action:
              - sts:AssumeRole
              - sts:TagSession
      Policies:
        - PolicyName: ack-cognito-controller-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:*
                Resource: "*"
  AckCognitoControllerPodIdentityAssociation:
    Type: AWS::EKS::PodIdentityAssociation
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: ack-system
      ServiceAccount: ack-cognitoidentityprovider-controller
      RoleArn: !GetAtt AckCognitoControllerRole.Arn
    DependsOn:
      - ControlPlane
  
  BackstageRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ClusterName}-backstage-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - pods.eks.amazonaws.com
            Action:
              - sts:AssumeRole
              - sts:TagSession
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess

  ControllersRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${ClusterName}-controllers"

Outputs:
  ControllersRepositoryUri:
    Description: "Full ECR repository URI for controllers"
    Value: !GetAtt ControllersRepository.RepositoryUri
    Export:
      Name: !Sub "${ClusterName}-controllers-repository-uri"
  ExternalDNSRoleArn:
    Description: "ARN of the IAM role for ExternalDNS"
    Value: !GetAtt ExternalDnsRole.Arn
    Export:
      Name: !Sub "${ClusterName}-externaldns-role-arn"
  CertManagerRoleArn:
    Description: "ARN of the IAM role for Cert Manager"
    Value: !GetAtt CertManagerRole.Arn
    Export:
      Name: !Sub "${ClusterName}-certmanager-role-arn"
  AckControllerRoleArn:
    Description: "ARN of the IAM role for ACK Controller"
    Value: !GetAtt AckControllerRole.Arn
    Export:
      Name: !Sub "${ClusterName}-ackcontroller-role-arn"
  BackstageRoleArn:
    Description: "ARN of the IAM role for Backstage"
    Value: !GetAtt BackstageRole.Arn
    Export:
      Name: !Sub "${ClusterName}-backstage-role-arn"
